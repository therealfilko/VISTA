version: "3.8"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
    restart: unless-stopped
    ports:
      - ${PORT:-8080}:${PORT:-8080}
    environment:
      APP_ENV: ${APP_ENV:-development}
      PORT: ${PORT:-8080}
      BLUEPRINT_DB_HOST: psql_bp
      BLUEPRINT_DB_PORT: 5432
      BLUEPRINT_DB_DATABASE: test_db
      BLUEPRINT_DB_USERNAME: test_user
      BLUEPRINT_DB_PASSWORD: test_password
      BLUEPRINT_DB_SCHEMA: public
    depends_on:
      psql_bp:
        condition: service_healthy
    networks:
      - blueprint

  frontend_dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend_dev
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - VITE_HOST=0.0.0.0
    networks:
      - blueprint

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "5173:5173"
    networks:
      - blueprint

  psql_bp:
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_DB: test_db
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
    ports:
      - "5432:5432"
    volumes:
      - psql_volume_bp:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 15s
    networks:
      - blueprint

volumes:
  psql_volume_bp:

networks:
  blueprint:
